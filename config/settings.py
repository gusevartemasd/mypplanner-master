"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import environ

from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env(
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(tuple, ['*']),
    SECRET_KEY=(str, 'bmw5vxsfy!@1i1#=5#%8=g#tk-im_9r@j3ae^pge$ih8p^u@wm'),
    DATABASE_URL=(str, 'psql://developer:developer@localhost:5432/postpipelines'),
    MONGODB_URL=(str, 'mongodb://localhost:27017/pplanner'),
    LOG_LEVEL=(str, 'INFO'),
    LOG_FILE=(str, '/tmp/app.log'),
    LANGUAGE_CODE=(str, 'ru-RU'),
    LANGUAGE_COOKIE_NAME=(str, 'lang'),
    TIME_ZONE=(str, 'UTC'),
    STATIC_URL=(str, '/public/assets/'),
    STATIC_ROOT=(str, os.path.join(BASE_DIR, 'public', 'assets')),
    MEDIA_URL=(str, '/public/uploads/'),
    MEDIA_ROOT=(str, os.path.join(BASE_DIR, 'public', 'uploads')),
    DADATA_KEY=(str, '9c5e78a95df8425c5ec8bde8b6c56193aad7f9b2'),
    DADATA_SECRET=(str, '51819f61e34e2226517a65ee448ac25a3c3fc707'),
    RUSS_POST_TOKEN=(str, 'SsTHA0pQblNOr9lp1MXjm6H354E8U7Fc'),
    RUSS_POST_LOGIN=(str, 'pplannermy@gmail.com'),
    RUSS_POST_PASSWORD=(str, 'mypplanner456'),
    RUSS_POST_BASE_URL=(str, 'https://otpravka-api.pochta.ru'),
    TELEGRAM_BOT_TOKEN=(str, '733288586:AAEzV4zCVyctmX6qjiaY1qJelcPOV_YZVpw'),
    TELEGRAM_BOT_CHAT_ID=(str, '-257597217'),
    DEFAULT_FROM_EMAIL=(str, 'info@pplanner.ru'),
    EMAIL_URL=(str, 'smtp+tls://info@pplanner.ru:mypplanner123@smtp.yandex.ru:587'),
    CELERY_BROKER_URL=(str, 'amqp://root:pplanner@rabbit:5672/pplanner'),
    CELERY_RESULT_BACKEND=(str, 'django-db'),
    AMOCRM_LOGIN=(str, 'pplannermy@gmail.com'),
    AMOCRM_HASH=(str, 'cf4c8c583b77ed4088965b6b7cd135f13e7a360c'),
    AMOCRM_SUBDOMAIN=(str, 'pplanner'),
    SDEK_SECURE_PASSWORD=(str, '29dd4d5e4f55e6dc71710de6e0578642'),
    SDEK_ACCOUNT=(str, '52928b4eedbafad15d29be355d03f9ff'),
    SMSC_LOGIN=(str, 'easygift'),
    SMSC_PASSWORD=(str, 'ser1ega'),
)

_env_file = os.path.join(BASE_DIR, '.env')
if os.path.exists(_env_file):
    env.read_env(_env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'shops.apps.ShopsConfig',
    'orders.apps.OrdersConfig',
    'articles.apps.ArticlesConfig',
    'stock.apps.StockConfig',
    'notifications.apps.NotificationsConfig',
    'delivery.apps.DeliveryConfig',
    'crm.apps.CrmConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': env('LOG_LEVEL'),
            'class': 'logging.StreamHandler',
        },
        'logfile': {
            'level': env('LOG_LEVEL'),
            'class': 'logging.FileHandler',
            'filename': env('LOG_FILE'),
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console', 'logfile']
    },
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = env('LANGUAGE_CODE')

LANGUAGES = (
    ('en', _('English')),
    ('ru', _('Russian')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE_COOKIE_NAME = env('LANGUAGE_COOKIE_NAME')

TIME_ZONE = env('TIME_ZONE')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = env('STATIC_URL')
STATIC_ROOT = env('STATIC_ROOT')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'assets'),
]

MEDIA_URL = env('MEDIA_URL')
MEDIA_ROOT = env('MEDIA_ROOT')

MONGODB_URL = env('MONGODB_URL')

# DaData client
# https://github.com/tigrus/dadata-python
DADATA_KEY = env('DADATA_KEY')
DADATA_SECRET = env('DADATA_SECRET')

RUSS_POST_TOKEN = env('RUSS_POST_TOKEN')
RUSS_POST_LOGIN = env('RUSS_POST_LOGIN')
RUSS_POST_PASSWORD = env('RUSS_POST_PASSWORD')
RUSS_POST_BASE_URL = env('RUSS_POST_BASE_URL')

TELEGRAM_BOT_TOKEN = env('TELEGRAM_BOT_TOKEN')
TELEGRAM_BOT_CHAT_ID = env('TELEGRAM_BOT_CHAT_ID')

DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
EMAIL_CONFIG = env.email_url('EMAIL_URL')
vars().update(EMAIL_CONFIG)

CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')

AMOCRM_SUBDOMAIN = env('AMOCRM_SUBDOMAIN')
AMOCRM_LOGIN = env('AMOCRM_LOGIN')
AMOCRM_HASH = env('AMOCRM_HASH')

SDEK_SECURE_PASSWORD = env('SDEK_SECURE_PASSWORD')
SDEK_ACCOUNT = env('SDEK_ACCOUNT')

SMSC_LOGIN = env('SMSC_LOGIN')
SMSC_PASSWORD = env('SMSC_PASSWORD')
